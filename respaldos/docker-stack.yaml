version: '3.8'

services:
  # Servicio para el frontend ReactJS en desarrollo
  frontend-desarrollo:
    build:
      context: ./proyecto-frontApp
      dockerfile: Dockerfile
      args:
        VITE_NODE_ENV: desarrollo
        VITE_PORT_LOCAL: 3003
    container_name: frontend-desarrollo
    environment:
      - VITE_NODE_ENV=desarrollo
      - VITE_PORT_LOCAL=3003
    ports:
      - "3003:80"  # Exponer el puerto 3003 en desarrollo
    networks:
      - env_desarrollo
    depends_on:
      - nestjs-desarrollo
      - python-service-desarrollo

  # Servicio para el frontend ReactJS en producción
  frontend-produccion:
    build:
      context: ./proyecto-frontApp
      dockerfile: Dockerfile
      args:
        VITE_NODE_ENV: produccion
        VITE_PORT_PRODUCCION: 4003
    container_name: frontend-produccion
    environment:
      - VITE_NODE_ENV=produccion
      - VITE_PORT_PRODUCCION=4003
    ports:
      - "4003:81"  # Exponer el puerto 4003 en producción
    networks:
      - env_produccion
    depends_on:
      - nestjs-produccion
      - python-service-produccion

  # Servicio para el microservicio de NestJS en desarrollo
  nestjs-desarrollo:
    build:
      context: ./proyecto-backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: desarrollo
        PORT_DESARROLLO: 3001
    container_name: nestjs-desarrollo
    ports:
      - "3001:3001"
    environment:
      - PORT_DESARROLLO=3001
      - DATABASE_HOST_DESARROLLO=postgres_db_desarrollo
      - DATABASE_PORT_DESARROLLO=5432
      - DATABASE_USER=admin
      - DATABASE_PASSWORD=admin
      - DATABASE_NAME=proyecto
      - JWT_SECRET=mysecretproyecto
    networks:
      - env_desarrollo
    depends_on:
      - postgres_db_desarrollo

  # Servicio para el microservicio de NestJS en producción
  nestjs-produccion:
    build:
      context: ./proyecto-backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: produccion
        PORT_PRODUCCION: 4001
    container_name: nestjs-produccion
    ports:
      - "4001:4001"
    environment:
      - PORT_PRODUCCION=4001
      - DATABASE_HOST_PRODUCCION=postgres_db_produccion
      - DATABASE_PORT_PRODUCCION=5432
      - DATABASE_USER=admin
      - DATABASE_PASSWORD=admin
      - DATABASE_NAME=proyecto
      - JWT_SECRET=mysecretproyecto
    networks:
      - env_produccion
    depends_on:
      - postgres_db_produccion

  # Servicio para el microservicio de Python FastAPI en desarrollo
  python-service-desarrollo:
    build:
      context: ./ms-python-chatbot
      dockerfile: Dockerfile
      args:
        UVICORN_ENV: desarrollo
        PORT_DESARROLLO: 3000
    container_name: python-service-desarrollo
    ports:
      - "3000:3000"
    environment:
      - PORT_DESARROLLO=3000
      - UVICORN_ENV=desarrollo
    networks:
      - env_desarrollo

  # Servicio para el microservicio de Python FastAPI en producción
  python-service-produccion:
    build:
      context: ./ms-python-chatbot
      dockerfile: Dockerfile
      args:
        UVICORN_ENV: produccion
        PORT_PRODUCCION: 4000
    container_name: python-service-produccion
    ports:
      - "4000:4000"
    environment:
      - PORT_PRODUCCION=4000
      - UVICORN_ENV=produccion
    networks:
      - env_produccion

  # Servicio para la base de datos PostgreSQL en desarrollo
  postgres_db_desarrollo:
    container_name: postgres_db_desarrollo
    image: postgres:latest
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=proyecto
    networks:
      - env_desarrollo
    volumes:
      - postgres_data_desarrollo:/var/lib/postgresql/data

  # Servicio para la base de datos PostgreSQL en producción
  postgres_db_produccion:
    container_name: postgres_db_produccion
    image: postgres:latest
    restart: always
    ports:
      - "4432:5432"  # Cambia el puerto externo a 4432
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=proyecto
    networks:
      - env_produccion
    volumes:
      - postgres_data_produccion:/var/lib/postgresql/data

  # Servicio para Adminer (administración de base de datos)
  adminer:
    image: adminer
    container_name: adminer
    restart: always
    depends_on:
      - postgres_db_desarrollo
      - postgres_db_produccion
    ports:
      - "8080:8080"
    networks:
      - env_desarrollo
      - env_produccion

  # Servicio para nginx en desarrollo
  nginx-desarrollo:
    build:
      context: ./nginx-desarrollo/apache2-utils
      dockerfile: Dockerfile
    container_name: nginx-desarrollo
    volumes:
      - ./nginx-desarrollo/apache2-utils/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx-desarrollo/apache2-utils/.htpasswd:/etc/nginx/.htpasswd
    networks:
      - env_desarrollo
    ports:
      - "3003:80"
    depends_on:
      - frontend-desarrollo

  # Servicio para nginx en producción
  nginx-produccion:
    build:
      context: ./nginx-produccion/apache2-utils
      dockerfile: Dockerfile
    container_name: nginx-produccion
    volumes:
      - ./nginx-produccion/apache2-utils/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx-produccion/apache2-utils/.htpasswd:/etc/nginx/.htpasswd
    networks:
      - env_produccion
    ports:
      - "4003:81"
    depends_on:
      - frontend-produccion

volumes:
  postgres_data_desarrollo:
  postgres_data_produccion:

networks:
  env_desarrollo:
    driver: bridge
    enable_ipv6: true
    ipam:
      driver: default
      config:
        - subnet: 172.16.232.0/24
          gateway: 172.16.232.1
        - subnet: "2001:3974:3979::/64"
          gateway: "2001:3974:3979::1"

  env_produccion:
    driver: bridge
    enable_ipv6: true
    ipam:
      driver: default
      config:
        - subnet: 172.16.235.0/24
          gateway: 172.16.235.1
        - subnet: "2001:3984:3989::/64"
          gateway: "2001:3984:3989::1"