Para ms-python:
Copiar código
docker build -t ms-python-desarrollo-devops --build-arg ENTORNO_ENV=desarrollo ./ms-python
docker build -t ms-python-produccion-devops --build-arg ENTORNO_ENV=produccion ./ms-python

Para ms-nestjs-security:
Copiar código
docker build -t ms-nestjs-security-desarrollo-devops --build-arg ENTORNO_ENV=desarrollo ./ms-nestjs-security
docker build -t ms-nestjs-security-produccion-devops --build-arg ENTORNO_ENV=produccion ./ms-nestjs-security

Para ms-nestjs-bff:
Copiar código
docker build -t ms-nestjs-bff-desarrollo-devops --build-arg ENTORNO_ENV=desarrollo ./ms-nestjs-bff
docker build -t ms-nestjs-bff-produccion-devops --build-arg ENTORNO_ENV=produccion ./ms-nestjs-bff


PARA FRONTEND
docker build -t proyecto-frontapp-desarrollo-devops --build-arg VITE_ENTORNO=desarrollo ./proyecto-frontApp
docker build -t proyecto-frontapp-produccion-devops --build-arg VITE_ENTORNO=produccion ./proyecto-frontApp

docker build --no-cache -t proyecto-frontapp-desarrollo-devops --build-arg VITE_ENTORNO=desarrollo ./proyecto-frontApp
docker build --no-cache -t proyecto-frontapp-produccion-devops --build-arg VITE_ENTORNO=produccion ./proyecto-frontApp

**********************************************************************************************************
Comandos para Port Forward
Ejecución simultánea
Si deseas ejecutar todos los comandos en paralelo, puedes abrir varias terminales o utilizar un solo comando en el fondo con &:

PARA CADA TERMINAL
kubectl port-forward deployment/ms-python-desarrollo 32000:3000
kubectl port-forward deployment/ms-nestjs-security 32001:3001
kubectl port-forward deployment/ms-nestjs-bff 32002:3002
kubectl port-forward deployment/proyecto-frontapp-desarrollo 32003:80


bash
Copiar código
kubectl port-forward deployment/ms-python-desarrollo 32000:3000 &
kubectl port-forward deployment/ms-nestjs-security 32001:3001 &
kubectl port-forward deployment/ms-nestjs-bff 32002:3002 &
kubectl port-forward deployment/proyecto-frontapp-desarrollo 32003:80 &
kubectl port-forward deployment/pgadmin-deployment 30200:80 &



Limpiar recursos de Kubernetes sin eliminar Minikube (Opción 1):
# Eliminar todos los pods, deployments y servicios
kubectl delete all --all -n default

# Eliminar los Secrets y ConfigMaps
kubectl delete secrets --all -n default
kubectl delete configmaps --all -n default

# Eliminar PersistentVolumeClaims (PVC)
kubectl delete pvc --all -n default

# Eliminar PersistentVolumes (PV)
kubectl delete pv --all

# Eliminar Namespaces personalizados (si tienes más de uno, reemplaza <namespace_name> con el nombre del namespace)
kubectl delete namespace <namespace_name>

Eliminar Minikube completamente y recrearlo (Opción 2):
# Detener Minikube
minikube stop

# Eliminar Minikube y sus configuraciones
minikube delete --purge

# Reiniciar un nuevo clúster Minikube
minikube start

#ACTIVAR LA VARIABLE DE ENTORNO
minikube docker-env

APIS
https://www.freepublicapis.com/tags/development

JENKINS-FILES:
https://downloads.apache.org/maven/

https://www.jenkins.io/

https://hub.docker.com/r/jenkins/jenkins

https://github.com/jenkinsci/docker/blob/master/README.md

SOLUCION ERROR DOCKER LOCAL

sudo nano /etc/resolv.conf
nameserver 8.8.8.8
nameserver 8.8.4.4

Ejecutar Jenkins directamente con Docker

# Reinicia el servicio Docker para asegurar que todo está funcionando correctamente.
sudo systemctl restart docker 

# Ejecuta Jenkins con la imagen oficial, mapeando los puertos necesarios:
# - 8080: Interfaz web de Jenkins
# - 50000: Puerto para agentes de Jenkins (conectar nodos)
# - --restart=on-failure: Reinicia el contenedor en caso de fallos.
docker run -p 8080:8080 -p 50000:50000 --restart=on-failure jenkins/jenkins:lts-jdk17
SOLUCION PROBLEMAS CON TENSORFLOW TIMEOUT
kubectl port-forward --request-timeout=10m pod/jenkins 8080:8080


# Opción 2: Desplegar Jenkins en Kubernetes
# Construir una imagen personalizada de Jenkins
docker build -t jenkins:latest .

# Aplicar configuraciones en Kubernetes
kubectl apply -f jenkins-service-account.yaml
kubectl apply -f jenkins-clusterrole.yaml
kubectl apply -f jenkins-clusterrolebinding.yaml
kubectl apply -f jenkins-role.yaml
kubectl apply -f jenkins-rolebinding.yaml
kubectl apply -f jenkins-pvc.yaml
ls -l ~/.kube/config -> kubectl create configmap kubeconfig-map --from-file=config=/home/devars/.kube/config  (SI EXISTE NO EJECUTAR) 
kubectl apply -f jenkins-service.yaml
kubectl apply -f jenkins-deployment.yaml



1) ESTO ES RELEVANTE: 
   kubectl create configmap kubeconfig-map --from-file=config=/home/devars/.kube/config --dry-run=client -o yaml | kubectl apply -f -
2) mkdir -p /var/jenkins_home/.kube
3) EN CASO QUE NO TENGAMOS CONTEXTO DE KUBERNETES EN JENKINS PODS
   Contexto de Kubernetes no configurado en Jenkins:
   kubectl cp ~/.kube/config jenkins-6cf96457f9-r42zk:/var/jenkins_home/.kube/config
4) Dentro del contenedor, configura la variable de entorno para que apunte al archivo config:
   export KUBECONFIG=/var/jenkins_home/.kube/config
5) Permisos en el directorio de trabajo de Jenkins: DENTRO DEL CONTENEDOR
   chmod -R 775 /var/jenkins_home/workspace
6) ESTO IGUAL DENTRO DEL PODS SE PUEDE REALIZAR 
   kubectl config use-context minikube / kubectl config current-context
7) VERIFICAMOS DENTRO DEL CONTENEDOR ESTO
   kubectl config get-contexts
8) "test": "react-scripts test --env=jsdom" -> JSON DE REACTJS EN SCRIPTS

  245  which minikube 
  246  minikube version
  247  docker image ls
  248  kubectl config use-context minikube
  249  kubectl config current-context
  250  kubectl config get-contexts


EXPLICACION: 
Debe ejecutarse en tu clúster Kubernetes después de desplegar la aplicación y la ServiceAccount. 
Este comando asigna permisos específicos (en este caso, 
el rol de cluster-admin) a la ServiceAccount llamada jenkins-sa.

kubectl create clusterrolebinding jenkins-role-binding \
  --clusterrole=cluster-admin \
  --serviceaccount=default:jenkins-sa

****DENTRO DEL CONTENEDOR DE JENKINS ************************************
kubectl exec -it pod/<nuevo-nombre-del-pod> -- /bin/bash
ls -l /var/run/docker.sock
usuario que tiene acceso al socket

Si el comando para agregar el grupo se ejecuta en el arranque, asegúrate de modificar la configuración. Busca algo como esto en el jenkins-deployment.yaml:
env:
          - name: DOCKER_GID
            value: "989"  # Reemplaza con el GID que obtuviste del host
        command: ["/bin/sh", "-c"]
        args:
        - >
          if ! getent group docker > /dev/null; then
            groupadd -g $DOCKER_GID docker;
          fi &&
          usermod -aG docker jenkins &&
          /usr/bin/tini -- /usr/local/bin/jenkins.sh;
        securityContext:
          runAsUser: 0  # Ejecuta como root
          runAsGroup: 0 # Ejecuta como root


verificar grupo de jenkins
groups jenkins

usermod -aG docker jenkins

exit  # Sal de la sesión interactiva
kubectl delete pod <nombre-del-pod>

EJECTURAR EN CONTENEDOR:
groupadd docker
usermod -aG docker jenkins
chgrp docker /var/run/docker.sock
chmod 660 /var/run/docker.sock

-- ESTE ES EL OTRO ARCHIVO: 
*************************************************************************

Verifica que el usuario jenkins pertenece al grupo docker:
bash
¡Copiado!
id jenkins

# Verificar recursos creados
kubectl get pods
kubectl get svc
kubectl get pvc

# Redirigir localmente el puerto 8080 para acceder a la interfaz web de Jenkins
kubectl port-forward service/jenkins-service 8080:8080

# Obtener la contraseña inicial de administrador desde el pod
kubectl exec -it <nombre-del-pod> -- cat /var/jenkins_home/secrets/initialAdminPassword

# Obtener configuración del clúster de Kubernetes desde el pod
kubectl exec -it <nombre-del-pod> -- cat /root/.kube/config

# Validar permisos en el socket de Docker
ls -l /var/run/docker.sock

# Configurar el contexto de Docker en Jenkins
minikube docker-env
eval $(minikube docker-env)


# Detener Minikube si ya está corriendo
minikube stop

# Reiniciar el servicio Docker
sudo systemctl restart docker

**********************************************************************************************************

Plugins recomendados para Jenkins

MS-PYTHON:

- Python Plugin: Ejecutar scripts y pruebas en Python.
- ShiningPanda Plugin: Configurar entornos virtuales de Python.
- Cobertura Plugin: Análisis de cobertura de pruebas.

MS-NESTJS-SECURITY y MS-NESTJS-BFF:

- NodeJS Plugin: Ejecutar pipelines que usen Node.js.
- Pipeline Utility Steps Plugin: Manipular archivos YAML o JSON.
- JUnit Plugin: Reportar resultados de pruebas automatizadas (jest).

Proyecto-frontApp:

- HTML Publisher Plugin: Publicar reportes generados por herramientas frontend.
- GitHub Plugin: Conectar Jenkins con repositorios frontend.
- Build Pipeline Plugin: Organizar pasos de construcción y pruebas frontend.

Otros plugins esenciales:

- Kubernetes Plugin: Integrar Jenkins con Kubernetes.
- Pipeline Plugin: Manejar pipelines declarativos.
- Docker Pipeline Plugin: Trabajar con Docker desde pipelines.
- Git Plugin: Interactuar con repositorios Git.
- Credentials Plugin: Administrar credenciales seguras.
- Blue Ocean Plugin: Visualización amigable de pipelines.
- Kubernetes CLI Plugin: Ejecutar comandos `kubectl` desde Jenkins.

**********************************************************************************************************

Plugins recomendados para Jenkins

MS-PYTHON:

- Python Plugin: Ejecutar scripts y pruebas en Python.
- ShiningPanda Plugin: Configurar entornos virtuales de Python.
- Cobertura Plugin: Análisis de cobertura de pruebas.

MS-NESTJS-SECURITY y MS-NESTJS-BFF:

- NodeJS Plugin: Ejecutar pipelines que usen Node.js.
- Pipeline Utility Steps Plugin: Manipular archivos YAML o JSON.
- JUnit Plugin: Reportar resultados de pruebas automatizadas (jest).

Proyecto-frontApp:

- HTML Publisher Plugin: Publicar reportes generados por herramientas frontend.
- GitHub Plugin: Conectar Jenkins con repositorios frontend.
- Build Pipeline Plugin: Organizar pasos de construcción y pruebas frontend.

Otros plugins esenciales:

- Kubernetes Plugin: Integrar Jenkins con Kubernetes.
- Pipeline Plugin: Manejar pipelines declarativos.
- Docker Pipeline Plugin: Trabajar con Docker desde pipelines.
- Git Plugin: Interactuar con repositorios Git.
- Credentials Plugin: Administrar credenciales seguras.
- Blue Ocean Plugin: Visualización amigable de pipelines.
- Kubernetes CLI Plugin: Ejecutar comandos `kubectl` desde Jenkins.

**********************************************************************************************************

Flujo de trabajo automatizado
Construcción:

- Configurar un job para clonar repositorios.
- Realizar pruebas unitarias en cada microservicio.

Integración:
- Crear un pipeline multietapa para pruebas de integración.

Despliegue:
- Configurar un job que despliegue servicios en Kubernetes o Docker Compose.

Notificación:
- Configurar notificaciones con Email Extension Plugin o Slack Plugin.

**********************************************************************************************************
Configuración del daemon Docker desde Jenkins
# Montar el socket Docker del host en el deployment YAML
# Configurar el contexto de Docker en Jenkins
RUN groupadd docker && usermod -aG docker jenkins

OTRA EJECUCION DE JENKINS PARA MEJORAR BUILD ETAPAS JENKINS
minikube start --extra-config=kubelet.eviction-hard="memory.available<200Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<15%" \
               --extra-config=kubelet.serialize-image-pulls=false

kubectl port-forward --request-timeout=59m service/jenkins-service 8080:8080

PROBLEMAS ETAPAS DE TEST:
Buscar sobre ReactJS y Vite:

"Fix vulnerabilities in ReactJS project Vite 2024"
"How to update React Vite project to latest version"
Específicos para vulnerabilidades:

"Fix npm vulnerabilities in Vite React project"
"PostCSS vulnerability solution React Vite"
Cómo configurar React con Vite correctamente:

"Vite ReactJS setup step by step"
npm install --legacy-peer-deps
npm audit fix
npm run build

COMMIT NUEVA PRUEBAS 01/02/2025







